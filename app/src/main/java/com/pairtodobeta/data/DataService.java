package com.pairtodobeta.data;import com.pairtodobeta.data.entities.Task;import com.pairtodobeta.data.response.EmptyResultResponse;import com.pairtodobeta.data.response.chat.ChatDataResponse;import com.pairtodobeta.data.response.chat.Message;import com.pairtodobeta.data.response.gifts.Gift;import com.pairtodobeta.data.response.gifts.GiftsResponse;import com.pairtodobeta.data.response.invite.InviteResponse;import com.pairtodobeta.data.response.pulse.Pulse;import com.pairtodobeta.data.response.pulse.PulseResponse;import com.pairtodobeta.data.response.searchCouple.SearchCoupleResponse;import com.pairtodobeta.data.response.searchCouple.User;import com.pairtodobeta.data.response.signup.BasicResponse;import com.pairtodobeta.data.response.stats.StatsData;import com.pairtodobeta.data.response.tasks.ChangeTaskResponse;import com.pairtodobeta.data.response.tasks.GetTasksResponse;import com.pairtodobeta.data.response.tasks.UploadImageData;import com.pairtodobeta.data.response.userData.UserDataResponse;import com.pairtodobeta.data.response.userPhoto.UploadUserPhotoResponse;import com.pairtodobeta.data.response.userPhoto.UserImage;import com.pairtodobeta.network.api.ApiManager;import com.pairtodobeta.network.api.SignConfig;import com.pairtodobeta.utils.TimeUtils;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;/** * Created by ilyasavin on 2/4/17. */public class DataService {    private static DataService signInApiService;    public static DataService init() {        if (signInApiService == null) {            signInApiService = new DataService();        }        return signInApiService;    }    public void searchPairByNameOrEmail(final onSearchUser listener, String token, String query, String type){        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(query);        args.add(token);        args.add(String.valueOf(timeStamp));        args.add(type);        ApiManager.getApiService().searchPairByNameOrEmail(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, type, query, token, timeStamp).enqueue(new Callback<SearchCoupleResponse>() {            @Override            public void onResponse(Call<SearchCoupleResponse> call, Response<SearchCoupleResponse> response) {                listener.onSearchUserResult(response.body().result());            }            @Override            public void onFailure(Call<SearchCoupleResponse> call, Throwable t) {                listener.onSearchUserError();                int a = 5;            }        });    }    public void addTask(final onAddTask listener, Task task, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        String list = task.getList();        ApiManager.getApiService().addTask(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, task.getTitle(), task.getTermDate(), task.getDescription(), list,                task.getImage(), task.getExecutorId(), task.getIsImportant(), token, timeStamp        ).enqueue(new Callback<BasicResponse>() {            @Override            public void onResponse(Call<BasicResponse> call, Response<BasicResponse> response) {                listener.onAddTaskResult(response.body());            }            @Override            public void onFailure(Call<BasicResponse> call, Throwable t) {                listener.onAddTaskError();            }        });    }    public void editTask(final onChangeTask listener, Task task, String jobId, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(jobId);        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().editTask(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, jobId, jobId, task.getTitle(), task.getTermDate(), task.getDescription(), task.getList(),                task.getImage(), task.getExecutorId(), task.getIsImportant(), token, timeStamp        ).enqueue(new Callback<ChangeTaskResponse>() {            @Override            public void onResponse(Call<ChangeTaskResponse> call, Response<ChangeTaskResponse> response) {                listener.onChangeTaskResult(response.body());            }            @Override            public void onFailure(Call<ChangeTaskResponse> call, Throwable t) {                listener.onChangeTaskError();            }        });    }    public void removeTask(final onChangeTask listener, String token, String taskId) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(taskId);        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().removeTask(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, taskId, token, timeStamp).enqueue(new Callback<ChangeTaskResponse>() {            @Override            public void onResponse(Call<ChangeTaskResponse> call, Response<ChangeTaskResponse> response) {                listener.onChangeTaskResult(response.body());            }            @Override            public void onFailure(Call<ChangeTaskResponse> call, Throwable t) {                listener.onChangeTaskError();            }        });    }    public void markTask(final onChangeTask listener, String token, String taskId) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add("1");        args.add(taskId);        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().markTask(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, taskId, token, timeStamp, "1"        ).enqueue(new Callback<ChangeTaskResponse>() {            @Override            public void onResponse(Call<ChangeTaskResponse> call, Response<ChangeTaskResponse> response) {                listener.onChangeTaskResult(response.body());            }            @Override            public void onFailure(Call<ChangeTaskResponse> call, Throwable t) {                listener.onChangeTaskError();            }        });    }    public void getMyTasks(final onGetMyTasks listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getMyTasks(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<GetTasksResponse>() {            @Override            public void onResponse(Call<GetTasksResponse> call, Response<GetTasksResponse> response) {                listener.onGetMyTasksResult(response.body());            }            @Override            public void onFailure(Call<GetTasksResponse> call, Throwable t) {                listener.onGetMyTasksError();            }        });    }    public void sendInviteCode(final onInviteCouple listener, String token, String code1, String code2) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().sendCode(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, code1, code2, token, timeStamp).enqueue(new Callback<InviteResponse>() {            @Override            public void onResponse(Call<InviteResponse> call, Response<InviteResponse> response) {                listener.onInviteResult(response.body());            }            @Override            public void onFailure(Call<InviteResponse> call, Throwable t) {                listener.onInviteError();            }        });    }    public void getUserInfo(final onUserData listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getMyInfo(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<UserDataResponse>() {            @Override            public void onResponse(Call<UserDataResponse> call, Response<UserDataResponse> response) {                listener.onUserDataResult(response.body());            }            @Override            public void onFailure(Call<UserDataResponse> call, Throwable t) {                listener.onUserDataError();                call.clone();            }        });    }    public void sendPhoto(File file, final onAddPhotoTask listener, String token) throws IOException {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        RequestBody body = RequestBody.create(MediaType.parse("image/jpeg"), file);        RequestBody name = RequestBody.create(MediaType.parse("text/plain"), "file");        MultipartBody.Part filePart =                MultipartBody.Part.createFormData("file", file.getName(), body);        ApiManager.getApiService().addImageToTask(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, filePart, token, timeStamp).enqueue(new Callback<UploadImageData>() {            @Override            public void onResponse(Call<UploadImageData> call, Response<UploadImageData> response) {                listener.onAddPhotoResult(response.body());            }            @Override            public void onFailure(Call<UploadImageData> call, Throwable t) {                listener.onErrorPhotoResult();            }        });    }    public void getStats(final onStatsResult listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getStats(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<StatsData>() {            @Override            public void onResponse(Call<StatsData> call, Response<StatsData> response) {                listener.onStatsResult(response.body());            }            @Override            public void onFailure(Call<StatsData> call, Throwable t) {                call.clone();            }        });    }    public void getGifts(final onGetGifts listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getGifts(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<GiftsResponse>() {            @Override            public void onResponse(Call<GiftsResponse> call, Response<GiftsResponse> response) {                listener.onGetGiftsResult(response.body().result());            }            @Override            public void onFailure(Call<GiftsResponse> call, Throwable t) {                call.clone();            }        });    }    public void sendGift(final onMessageTask listener, String token, String text, String template) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().sendGift(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp, text, template).enqueue(new Callback<EmptyResultResponse>() {            @Override            public void onResponse(Call<EmptyResultResponse> call, Response<EmptyResultResponse> response) {                listener.onMessageResult();            }            @Override            public void onFailure(Call<EmptyResultResponse> call, Throwable t) {                listener.onMessageError();            }        });    }    public void sendMessage(final onMessageTask listener, String message, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().sendMessage(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, message, token, timeStamp).enqueue(new Callback<BasicResponse>() {            @Override            public void onResponse(Call<BasicResponse> call, Response<BasicResponse> response) {                listener.onMessageResult();            }            @Override            public void onFailure(Call<BasicResponse> call, Throwable t) {                listener.onMessageError();                call.clone();            }        });    }    public void getMessagesArchive(final onMessageGetTask listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getMessagesArchive(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<ChatDataResponse>() {            @Override            public void onResponse(Call<ChatDataResponse> call, Response<ChatDataResponse> response) {                if (response.body().result() != null)                    listener.onMessageResult(response.body().result());            }            @Override            public void onFailure(Call<ChatDataResponse> call, Throwable t) {                listener.onMessageError(t.getMessage());                call.clone();            }        });    }    public void getNewMessages(final onMessageGetTask listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getNewMessages(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<ChatDataResponse>() {            @Override            public void onResponse(Call<ChatDataResponse> call, Response<ChatDataResponse> response) {                if (response.body().result() != null)                    listener.onMessageResult(response.body().result());            }            @Override            public void onFailure(Call<ChatDataResponse> call, Throwable t) {                listener.onMessageError(t.getMessage());                call.clone();            }        });    }    public void getUserPulse(final onGetPulseTask listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getPulse(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<PulseResponse>() {            @Override            public void onResponse(Call<PulseResponse> call, Response<PulseResponse> response) {                listener.onGetPulseResult(response.body().result());            }            @Override            public void onFailure(Call<PulseResponse> call, Throwable t) {                listener.onGetPulseError(t.toString());                call.clone();            }        });    }    public void getJobMessages(final onMessageGetTask listener, String token, String jobId) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getJobArchiveMessages(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<ChatDataResponse>() {            @Override            public void onResponse(Call<ChatDataResponse> call, Response<ChatDataResponse> response) {                listener.onMessageResult(response.body().result());            }            @Override            public void onFailure(Call<ChatDataResponse> call, Throwable t) {                listener.onMessageError(t.toString());                call.clone();            }        });    }    public void sendJobMessage(final onMessageTask listener, String token, String jobId, String message) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().sendJobMessage(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, jobId, message, token, timeStamp).enqueue(new Callback<BasicResponse>() {            @Override            public void onResponse(Call<BasicResponse> call, Response<BasicResponse> response) {                listener.onMessageResult();            }            @Override            public void onFailure(Call<BasicResponse> call, Throwable t) {                listener.onMessageError();                call.clone();            }        });    }    public void getNewJobMessages(final onMessageGetTask listener, String token) {        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        ApiManager.getApiService().getJobNewMessages(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, token, timeStamp).enqueue(new Callback<ChatDataResponse>() {            @Override            public void onResponse(Call<ChatDataResponse> call, Response<ChatDataResponse> response) {                if (response.body().result() != null)                    listener.onMessageResult(response.body().result());            }            @Override            public void onFailure(Call<ChatDataResponse> call, Throwable t) {                listener.onMessageError(t.getMessage());                call.clone();            }        });    }    public void uploadUserImage(File file, final onUploadUserPhoto listener, String token) throws IOException {        // TODO Send photo image task        ArrayList<String> args = new ArrayList<String>();        long timeStamp = TimeUtils.getTimeStamp();        args.add(token);        args.add(String.valueOf(timeStamp));        RequestBody body = RequestBody.create(MediaType.parse("image/jpeg"), file);        RequestBody name = RequestBody.create(MediaType.parse("text/plain"), "file");        MultipartBody.Part filePart =                MultipartBody.Part.createFormData("file", file.getName(), body);        ApiManager.getApiService().setUserImage(SignConfig.APP_ID, SignConfig.generateSig(args),                SignConfig.APP_LANG, SignConfig.OS, filePart, token, timeStamp).enqueue(new Callback<UploadUserPhotoResponse>() {            @Override            public void onResponse(Call<UploadUserPhotoResponse> call, Response<UploadUserPhotoResponse> response) {                listener.onUploadResult(response.body().userImage());            }            @Override            public void onFailure(Call<UploadUserPhotoResponse> call, Throwable t) {                listener.onUploadError(t.getMessage());            }        });    }    public interface onAddTask {        public void onAddTaskResult(BasicResponse response);        public void onAddTaskError();    }    public interface onChangeTask {        public void onChangeTaskResult(ChangeTaskResponse response);        void onChangeTaskError();    }    public interface onInviteCouple {        public void onInviteResult(InviteResponse inviteResponse);        void onInviteError();    }    public interface onGetMyTasks {        public void onGetMyTasksResult(GetTasksResponse response);        public void onGetMyTasksError();    }    public interface onUserData {        public void onUserDataResult(UserDataResponse response);        void onUserDataError();    }    public interface onStatsResult {        public void onStatsResult(StatsData data);    }    public interface onAddPhotoTask {        public void onAddPhotoResult(UploadImageData response);        public void onErrorPhotoResult();    }    public interface onGetGifts {        public void onGetGiftsResult(List<Gift> gifts);        public void onGetGiftsError();    }    public interface onMessageTask {        public void onMessageResult();        public void onMessageError();    }    public interface onMessageGetTask {        public void onMessageResult(List<Message> messages);        public void onMessageError(String message);    }    public interface onGetPulseTask {        void onGetPulseResult(Pulse pulse);        void onGetPulseError(String error);    }    public interface onUploadUserPhoto {        void onUploadResult(UserImage image);        void onUploadError(String error);    }    public interface onSearchUser {        void onSearchUserResult(List<User> users);        void onSearchUserError();    }}